definitions:
  main.AddNewUser:
    properties:
      status:
        type: string
      token:
        type: string
      uid:
        type: integer
    type: object
  main.AllUserResponseOK:
    properties:
      otkliks:
        type: string
      status:
        type: string
    type: object
  main.InfoError:
    properties:
      error:
        type: string
      info:
        type: string
      status:
        type: string
    type: object
  main.NewEmployer:
    properties:
      emp_id:
        type: integer
      status:
        type: string
    type: object
  main.RequestAdd:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      phoneNumber:
        type: string
    type: object
  main.RequestEmployee:
    properties:
      email:
        type: string
      inn:
        type: string
      nameOrg:
        type: string
      phoneNumber:
        type: string
    type: object
  main.RequestNewToken:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  main.RequestResponse:
    properties:
      UID:
        type: integer
      vac_id:
        type: integer
    type: object
  main.SimpleError:
    properties:
      error:
        type: string
      status:
        type: string
    type: object
  main.TokenForUser:
    properties:
      status:
        type: string
      token:
        type: string
    type: object
  sqlite.ResponseVac:
    properties:
      ID:
        type: integer
      about:
        type: string
      email:
        type: string
      emp_id:
        type: integer
      exp:
        type: string
      is_visible:
        type: boolean
      location:
        type: string
      phoneNumber:
        type: string
      price:
        type: integer
      vac_name:
        type: string
    type: object
info:
  contact: {}
paths:
  /all/vac:
    get:
      responses:
        "200":
          description: OK
          schema:
            type: string
  /auth/user:
    get:
      consumes:
      - application/json
      description: Позволяет выдать новый токен пользователю, если у него нету актуального
        'Bearer Token' или был, но он уже не действителен.
      parameters:
      - description: Актуальные логин (почта) и пароль пользователя
        in: body
        name: UserEmailNPassword
        required: true
        schema:
          $ref: '#/definitions/main.RequestNewToken'
      produces:
      - application/json
      responses:
        "200":
          description: Возвращает актуальный и новый токен для пользователя. Если
            произошла ошибка - статус будет 'Err' и будет возвращен текст ошибки!
            Также будет известно, где именно произошла ошибка!
          schema:
            $ref: '#/definitions/main.TokenForUser'
        "400":
          description: Возвращает ошибку, если не удалось распарсить body, который
            отвечает за данные пользователя!
          schema:
            $ref: '#/definitions/main.InfoError'
        "401":
          description: Возвращает ошибку, если не удалось найти пользователя в БД,
            который соответствовал бы данным, которые были получены сервером в результате
            этого запроса!
          schema:
            $ref: '#/definitions/main.SimpleError'
      summary: Выдать новый токен пользователю
      tags:
      - token
  /emp:
    post:
      consumes:
      - application/json
      description: Позволяет создать работодателя в системе. Будет возвращен ID и
        токен для работодателя!
      parameters:
      - description: Данные работодателя
        in: body
        name: EmpData
        required: true
        schema:
          $ref: '#/definitions/main.RequestEmployee'
      produces:
      - application/json
      responses:
        "200":
          description: Возвращает ID (И попозже будет Token) работодателя.
          schema:
            $ref: '#/definitions/main.NewEmployer'
        "400":
          description: Возвращает ошибку, если не удалось распарсить body-request!
          schema:
            $ref: '#/definitions/main.InfoError'
        "401":
          description: Возвращает ошибку, если не добавить работодателя с корректными
            данными. Конкретная ошибка будет в результате запроса!
          schema:
            $ref: '#/definitions/main.SimpleError'
      summary: Создать работодателя
      tags:
      - employer
  /emp/:id:
    get:
      responses:
        "200":
          description: OK
          schema:
            type: string
  /emp/vacs/id:
    get:
      description: Позволяет получить массив данных о всех вакансиях, которые есть
        у работодателя. Для этого нужно передать ID работодателя!
      parameters:
      - description: ID работодателя
        in: path
        name: EmpID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Возвращает массив актуальных вакансий от одного работодателя.
          schema:
            items:
              $ref: '#/definitions/sqlite.ResponseVac'
            type: array
        "400":
          description: Возвращает ошибку, если не удалось распарсить ID
          schema:
            $ref: '#/definitions/main.InfoError'
        "401":
          description: Возвращает ошибку, если не удалось получить список всех вакансий!
            Конкретная ошибка будет в результате запроса!
          schema:
            $ref: '#/definitions/main.SimpleError'
      summary: Получить все вакансии работодателя
      tags:
      - employer
  /user:
    post:
      consumes:
      - application/json
      description: Позволяет добавить нового пользователя в систему, если пользователя
        с такими данными не существовало!
      parameters:
      - description: 'Данные пользователя. А именно: Почта (email), пароль (password),
          name (имя), номер телефона (phoneNumber)'
        in: body
        name: UserData
        required: true
        schema:
          $ref: '#/definitions/main.RequestAdd'
      produces:
      - application/json
      responses:
        "200":
          description: Возвращает актуальный токен для пользователя, а также ID пользователя.
            Если произошла ошибка - статус будет 'Err' и будет возвращен текст ошибки!
            Также будет известно, где именно произошла ошибка!
          schema:
            $ref: '#/definitions/main.AddNewUser'
        "400":
          description: Возвращает ошибку, если не удалось распарсить body, который
            отвечает за данные пользователя!
          schema:
            $ref: '#/definitions/main.InfoError'
        "401":
          description: Возвращает ошибку, если не удалось добавить пользователя в
            БД, который соответствовал бы данным, которые были получены сервером в
            результате этого запроса или не удалось создать для него токен! Конкретная
            ошибка будет в результате запроса!
          schema:
            $ref: '#/definitions/main.SimpleError'
      summary: Создать нового пользователя
      tags:
      - user
  /user/otklik:
    post:
      consumes:
      - application/json
      description: Создает отклик на вакансию при помощи ID пользователя и вакансии.
        Статус отклика автоматически присваевается "Ожидание"
      parameters:
      - description: ID пользователя и вакансии, на которую нужно добавить отклик
        in: body
        name: IDs
        required: true
        schema:
          $ref: '#/definitions/main.RequestResponse'
      produces:
      - application/json
      responses:
        "200":
          description: Возвращает ID отклика. Если произошла ошибка - статус будет
            'Err' и будет возвращен текст ошибки! Также будет известно, где именно
            произошла ошибка!
          schema:
            type: integer
        "400":
          description: Возвращает ошибку, если не удалось распарсить request body.
            К ответу прикрепляется ID, который получил сервер, а также где именно
            произошла ошибка.
          schema:
            $ref: '#/definitions/main.InfoError'
      summary: Создание отклика на вакансию
      tags:
      - vacancy
  /user/otkliks/{id}:
    get:
      description: Возвращает список всех откликов для определенного пользователя
        по его ID
      parameters:
      - description: ID пользователя
        in: path
        name: UID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Возвращает статус и массив откликов. Если произошла ошибка
            - статус будет 'Err' и будет возвращен текст ошибки!
          schema:
            $ref: '#/definitions/main.AllUserResponseOK'
        "404":
          description: Возвращает ошибку, если не удалось преобразовать передаваемый
            параметр (ID) через URL.
          schema:
            $ref: '#/definitions/main.SimpleError'
      summary: Получение списка всех откликов для пользователя
      tags:
      - user
  /vac:
    get:
      responses:
        "200":
          description: OK
          schema:
            type: string
    post:
      responses:
        "200":
          description: OK
          schema:
            type: string
  /vac/:id:
    get:
      responses:
        "200":
          description: OK
          schema:
            type: string
swagger: "2.0"
