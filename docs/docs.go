// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/exp": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Возвращает список всех опыта, который будет использоваться в дальнейшем. Имееют доступ только пользователи роли ADMIN.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ADMIN"
                ],
                "summary": "Получение списка опыта",
                "responses": {
                    "200": {
                        "description": "Возвращает массив всех значений опыта. Если произошла ошибка - статус будет 'Err' и будет возвращен текст ошибки!",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main_go_internal_api_Struct.GetStatus"
                            }
                        }
                    },
                    "400": {
                        "description": "Возвращает ошибку, если не удалось получить из токена ID.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main_go_internal_api_Struct.InfoError"
                            }
                        }
                    },
                    "401": {
                        "description": "Возвращает ошибку, если у пользователя нету доступа к этому функционалу.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main_go_internal_api_Struct.InfoError"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Добавляет новую запись в таблицу, которая отвечает за хранение \"констант опыта\"",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ADMIN"
                ],
                "summary": "Добавление новой записи в таблицу с опытом",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Наименование нового опыта",
                        "name": "name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Добавляет новое значение в таблицу",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main_go_internal_api_Struct.Ok"
                            }
                        }
                    },
                    "400": {
                        "description": "Возвращает ошибку, если не удалось получить из токена ID (авторизовать пользователя)",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main_go_internal_api_Struct.InfoError"
                            }
                        }
                    },
                    "401": {
                        "description": "Возвращает ошибку, если у пользователя нету доступа к этому функционалу.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main_go_internal_api_Struct.InfoError"
                            }
                        }
                    }
                }
            }
        },
        "/status": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Возвращает список всех значений статусов, который будет использоваться в дальнейшем. Имееют доступ только пользователи роли ADMIN.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ADMIN"
                ],
                "summary": "Получение списка статусов",
                "responses": {
                    "200": {
                        "description": "Возвращает массив всех значений статусов. Если произошла ошибка - статус будет 'Err' и будет возвращен текст ошибки!",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main_go_internal_api_Struct.GetStatus"
                            }
                        }
                    },
                    "400": {
                        "description": "Возвращает ошибку, если не удалось получить из токена ID (авторизовать пользователя)",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main_go_internal_api_Struct.InfoError"
                            }
                        }
                    },
                    "401": {
                        "description": "Возвращает ошибку, если у пользователя нету доступа к этому функционалу.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main_go_internal_api_Struct.InfoError"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Добавляет новую запись в таблицу, которая отвечает за хранение \"констант статуса\"",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ADMIN"
                ],
                "summary": "Добавление новой записи в таблицу с статусом",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Наименование нового статуса",
                        "name": "name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Добавляет новое значение в таблицу и просто возвращает статус 'Ok!'",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main_go_internal_api_Struct.Ok"
                            }
                        }
                    },
                    "400": {
                        "description": "Возвращает ошибку, если не удалось получить из токена ID (авторизовать пользователя)",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main_go_internal_api_Struct.InfoError"
                            }
                        }
                    },
                    "401": {
                        "description": "Возвращает ошибку, если у пользователя нету доступа к этому функционалу.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main_go_internal_api_Struct.InfoError"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "main_go_internal_api_Struct.GetStatus": {
            "type": "object",
            "properties": {
                "crated_At": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "main_go_internal_api_Struct.InfoError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "info": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "main_go_internal_api_Struct.Ok": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
